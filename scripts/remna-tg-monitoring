#!/usr/bin/env bash
set -euo pipefail

# Resolve directories
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors and styles
RED=$(tput setaf 1 2>/dev/null || true)
GREEN=$(tput setaf 2 2>/dev/null || true)
YELLOW=$(tput setaf 3 2>/dev/null || true)
BLUE=$(tput setaf 4 2>/dev/null || true)
BOLD=$(tput bold 2>/dev/null || true)
RESET=$(tput sgr0 2>/dev/null || true)

# Spinner
SPINNER_PID=0
spin() {
  local marks=('/' '-' '\\' '|')
  local i=0
  tput civis 2>/dev/null || true
  while :; do
    printf "\r%s" "${marks[$i]}"
    i=$(( (i + 1) % 4 ))
    sleep 0.1
  done &
  SPINNER_PID=$!
}
stop_spin() {
  if [[ "${SPINNER_PID}" -ne 0 ]]; then
    kill "${SPINNER_PID}" >/dev/null 2>&1 || true
    wait "${SPINNER_PID}" 2>/dev/null || true
    SPINNER_PID=0
    printf "\r "
  fi
  tput cnorm 2>/dev/null || true
}

# Styled prints
title() { echo "${BLUE}${BOLD}$*${RESET}"; }
ok() { echo "${GREEN}$*${RESET}"; }
err() { echo "${RED}$*${RESET}"; }
info() { echo "${BLUE}$*${RESET}"; }
ask() { echo -n "${YELLOW}$*${RESET}"; }

trap 'echo "${RED}❌ Ошибка на строке $LINENO${RESET}"' ERR

compose_cmd() {
  if docker compose version >/dev/null 2>&1; then
    echo "docker compose"
  elif command -v docker-compose >/dev/null 2>&1; then
    echo "docker-compose"
  else
    return 1
  fi
}

show_help() {
  title "remna-tg-monitoring <команда>"
  echo
  info "Доступные команды:"
  echo "  install  - интерактивная установка (.env, сервисы)"
  echo "  start    - запустить контейнеры"
  echo "  stop     - остановить контейнеры"
  echo "  restart  - перезапустить контейнеры"
  echo "  status   - показать состояние контейнеров"
  echo "  logs     - показать логи (последние 100 строк)"
  echo "  links    - показать полезные ссылки"
  echo "  help     - помощь"
}

ensure_env_or_install() {
  if [[ ! -f .env ]]; then
    err "Файл .env не найден."
    echo "${YELLOW}${BOLD}Выполнить установку сейчас?${RESET}"
    echo "[1] Да"
    echo "[2] Нет"
    ask "> "
    IFS= read -r choice || true
    if [[ "$choice" == "1" ]]; then
      "$SCRIPT_DIR/install.sh"
    else
      exit 1
    fi
  fi
}

compose_run() {
  local bin
  bin=$(compose_cmd) || { err "docker compose не найден"; exit 1; }
  "$bin" "$@"
}

profile_args_from_env() {
  local args=()
  set -a; source .env; set +a
  [[ ${ENABLE_KUMA:-false} == true ]] && args+=(--profile kuma)
  [[ ${ENABLE_PROMETHEUS:-false} == true ]] && args+=(--profile monitoring)
  printf '%s\n' "${args[*]}"
}

subcommand="${1:-help}"
shift || true

cd "$PROJECT_DIR"

case "$subcommand" in
  install)
    "$SCRIPT_DIR/install.sh"
    ;;
  start)
    ensure_env_or_install
    title "Запускаю контейнеры Docker"
    spin
    PROFILES=( $(profile_args_from_env) )
    if compose_run ${PROFILES[@]} up -d >/dev/null 2>&1; then
      stop_spin
      ok "✅ Контейнеры запущены"
    else
      stop_spin
      err "❌ Не удалось запустить контейнеры"
      exit 1
    fi
    ;;
  stop)
    title "Останавливаю контейнеры Docker"
    spin
    if compose_run down >/dev/null 2>&1; then
      stop_spin
      ok "✅ Контейнеры остановлены"
    else
      stop_spin
      err "❌ Не удалось остановить контейнеры"
      exit 1
    fi
    ;;
  restart)
    ensure_env_or_install
    title "Перезапускаю контейнеры Docker"
    spin
    PROFILES=( $(profile_args_from_env) )
    if compose_run down >/dev/null 2>&1 && compose_run ${PROFILES[@]} up -d >/dev/null 2>&1; then
      stop_spin
      ok "✅ Контейнеры перезапущены"
    else
      stop_spin
      err "❌ Не удалось перезапустить контейнеры"
      exit 1
    fi
    ;;
  status)
    title "Состояние контейнеров"
    compose_run ps
    ;;
  logs)
    title "Логи docker compose (последние 100 строк)"
    compose_run logs --tail=100
    ;;
  links)
    ensure_env_or_install
    set -a
    # shellcheck disable=SC1091
    source .env
    set +a
    title "Полезные ссылки"
    printf '+---------------+--------------------------------------+'"\n"
    printf '| %-13s | %-36s |\n' "Service" "URL"
    printf '+---------------+--------------------------------------+'"\n"
    if [[ -n "${BOT_USERNAME:-}" ]]; then
      printf '| %-13s | %-36s |\n' "Bot" "https://t.me/$BOT_USERNAME"
    fi
    printf '| %-13s | %-36s |\n' "Metrics" "http://localhost:${METRICS_PORT:-9100}/metrics"
    if [[ ${ENABLE_KUMA:-false} == true ]]; then
      printf '| %-13s | %-36s |\n' "Kuma" "${KUMA_URL:-}"
    fi
    if [[ ${ENABLE_PROMETHEUS:-false} == true ]]; then
      printf '| %-13s | %-36s |\n' "Prometheus" "http://localhost:9090"
      printf '| %-13s | %-36s |\n' "Alertmanager" "http://localhost:9093"
    fi
    printf '+---------------+--------------------------------------+'\n
    ;;
  help|*)
    show_help
    ;;
esac

